from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import requests
import os
import signal
import logging
import time
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
ASK_NAME, ASK_SURNAME, ASK_AGE, ASK_GENRES, ASK_ACTORS, ASK_FAVORITE_MOVIE, SHOW_RECOMMENDATIONS = range(7)

# URL –≤–∞—à–µ–≥–æ API
API_URL = "http://127.0.0.1:8000/recommendations"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [
    ["–ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ", "–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º", "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"],
]

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
REQUEST_LIMIT = 5
REQUEST_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥
user_requests = {}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATE_FILE = 'user_states.json'

def load_user_states():
    if os.path.exists(USER_STATE_FILE):
        with open(USER_STATE_FILE, 'r') as file:
            return json.load(file)
    return {}

def save_user_states(user_states):
    with open(USER_STATE_FILE, 'w') as file:
        json.dump(user_states, file)

user_states = load_user_states()

def restrict_access(user_id):
    current_time = time.time()
    if user_id not in user_requests:
        user_requests[user_id] = []

    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    user_requests[user_id] = [t for t in user_requests[user_id] if current_time - t < REQUEST_INTERVAL]

    if len(user_requests[user_id]) >= REQUEST_LIMIT:
        return False

    user_requests[user_id].append(current_time)
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã."""
    user_id = str(update.message.from_user.id)
    if not restrict_access(user_id):
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    if user_id in user_states:
        await update.message.reply_text("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        return ASK_NAME

async def handle_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç—ã."""
    user_id = str(update.message.from_user.id)
    user_data = context.user_data
    current_state = context.user_data.get('current_state', ASK_NAME)

    if current_state == ASK_NAME:
        user_data['name'] = update.message.text
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
        context.user_data['current_state'] = ASK_SURNAME
        return ASK_SURNAME

    elif current_state == ASK_SURNAME:
        user_data['surname'] = update.message.text
        await update.message.reply_text("–•–æ—Ä–æ—à–æ! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
        context.user_data['current_state'] = ASK_AGE
        return ASK_AGE

    elif current_state == ASK_AGE:
        user_data['age'] = update.message.text
        await update.message.reply_text("–ö–∞–∫–∏–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–æ–≤? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–µ–¥–∏—è, –¥—Ä–∞–º–∞):")
        context.user_data['current_state'] = ASK_GENRES
        return ASK_GENRES

    elif current_state == ASK_GENRES:
        user_data['genres'] = update.message.text
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∞–∫—Ç–µ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        context.user_data['current_state'] = ASK_ACTORS
        return ASK_ACTORS

    elif current_state == ASK_ACTORS:
        user_data['actors'] = update.message.text
        await update.message.reply_text("–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?")
        context.user_data['current_state'] = ASK_FAVORITE_MOVIE
        return ASK_FAVORITE_MOVIE

    elif current_state == ASK_FAVORITE_MOVIE:
        user_data['favorite_movie'] = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = user_data
        save_user_states(user_states)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        await send_recommendations(update, context)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
        return ConversationHandler.END

async def send_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE, basic=False) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    url = f"{API_URL}/basic_recommendations" if basic else API_URL
    payload = {}

    if not basic:
        payload = {
            "name": context.user_data.get("name", ""),
            "surname": context.user_data.get("surname", ""),
            "age": context.user_data.get("age", ""),
            "genres": context.user_data.get("genres", ""),
            "actors": context.user_data.get("actors", ""),
            "favorite_movie": context.user_data.get("favorite_movie", ""),
            "num_recommendations": 5,
        }

    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        data = response.json()

        if data.get("status") != "success" or not data.get("recommendations"):
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
            return

        recommendations = data["recommendations"]
        messages = []
        for movie in recommendations:
            title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            genres = movie.get("genres_processed", "–ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            director = movie.get("director", "–†–µ–∂–∏—Å—Å–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω")
            actors = movie.get("actors", "–ê–∫—Ç–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã")

            message = (
                f"üé¨ *{title}*\n"
                f"üìñ –ñ–∞–Ω—Ä—ã: {genres}\n"
                f"üé• –†–µ–∂–∏—Å—Å–µ—Ä: {director}\n"
                f"‚≠ê –ê–∫—Ç–µ—Ä—ã: {actors}\n"
            )
            messages.append(message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for msg in messages:
            await update.message.reply_text(msg, parse_mode="Markdown")
    except requests.RequestException as e:
        logger.error(f"Request error: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def show_basic_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    logger.info("Basic recommendations command received")
    await send_recommendations(update, context, basic=True)

async def restart_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã."""
    await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    os.kill(os.getpid(), signal.SIGINT)

async def rate_movie(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–∞ –∏ –æ—Ü–µ–Ω–∫—É (–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è/–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è):")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–∞

async def complex_rate_movie(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–∞ –∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–∂–∞–Ω—Ä, –∞–∫—Ç–µ—Ä—ã, —Ä–µ–∂–∏—Å—Å–µ—Ä –∏ —Ç.–¥.):")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–∞

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        "/basic_recommendations - –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "/restart_survey - –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ\n"
        "/rate_movie - –û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º\n"
        "/complex_rate_movie - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
    )
    await update.message.reply_text(help_text)
