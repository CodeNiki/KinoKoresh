from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import requests
import os
import signal
import logging
from bot.db import get_connection  # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞, —É–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É.

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
ASK_NAME, ASK_SURNAME, ASK_AGE, ASK_GENRES, ASK_ACTORS, ASK_FAVORITE_MOVIE, SHOW_RECOMMENDATIONS = range(7)

# URL –≤–∞—à–µ–≥–æ API
API_URL = "http://127.0.0.1:8000/recommendations"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = [
    ["–ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ", "–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
]

async def set_main_menu(application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫."""
    await application.bot.set_my_commands([
        ("restart_survey", "–ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ"),
        ("basic_recommendations", "–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"),
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã."""
    logger.info("Start command received")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_surname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–æ—Å–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é."""
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return ASK_SURNAME

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç."""
    context.user_data['surname'] = update.message.text
    await update.message.reply_text("–•–æ—Ä–æ—à–æ! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    return ASK_AGE

async def ask_genres(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã."""
    context.user_data['age'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∏–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–æ–≤? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–µ–¥–∏—è, –¥—Ä–∞–º–∞):")
    return ASK_GENRES

async def ask_actors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–æ—Å–∏—Ç—å –ª—é–±–∏–º—ã—Ö –∞–∫—Ç—ë—Ä–æ–≤."""
    context.user_data['genres'] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∞–∫—Ç–µ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    return ASK_ACTORS

async def ask_favorite_movie(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–æ—Å–∏—Ç—å –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º."""
    context.user_data['actors'] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º?")
    return ASK_FAVORITE_MOVIE

async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    context.user_data['favorite_movie'] = update.message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await send_recommendations(update, context)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)
    await update.message.reply_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def send_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE, basic=False) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    url = f"{API_URL}/basic_recommendations" if basic else API_URL
    payload = {}

    if not basic:
        payload = {
            "name": context.user_data.get("name", ""),
            "surname": context.user_data.get("surname", ""),
            "age": context.user_data.get("age", ""),
            "genres": context.user_data.get("genres", ""),
            "actors": context.user_data.get("actors", ""),
            "favorite_movie": context.user_data.get("favorite_movie", ""),
            "num_recommendations": 5,
        }

    try:
        response = requests.post(url, json=payload) if not basic else requests.get(url)
        response.raise_for_status()
        data = response.json()

        if data.get("status") != "success" or not data.get("recommendations"):
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
            return

        recommendations = data["recommendations"]
        messages = []
        for movie in recommendations:
            title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            genres = movie.get("genres_processed", "–ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            director = movie.get("director", "–†–µ–∂–∏—Å—Å–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω")
            actors = movie.get("actors", "–ê–∫—Ç–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã")

            message = (
                f"üé¨ *{title}*\n"
                f"üìñ –ñ–∞–Ω—Ä—ã: {genres}\n"
                f"üé• –†–µ–∂–∏—Å—Å–µ—Ä: {director}\n"
                f"‚≠ê –ê–∫—Ç–µ—Ä—ã: {actors}\n"
            )
            messages.append(message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for msg in messages:
            await update.message.reply_text(msg, parse_mode="Markdown")
    except requests.RequestException as e:
        logger.error(f"Request error: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def show_basic_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    logger.info("Basic recommendations command received")
    await send_recommendations(update, context, basic=True)

async def restart_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã."""
    await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    os.kill(os.getpid(), signal.SIGINT)
